//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accessToken(completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        accessTokenWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/User/AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "tokenType" : "deviceVerification",
  "token" : "token"
}}]

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func accessTokenWithRequestBuilder() -> RequestBuilder<TokenResponse> {
        let path = "/api/User/AccessToken"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addExternalLogin(model: ExternalLoginRequest? = nil, completion: @escaping ((_ data: ExternalLoginResponse?,_ error: Error?) -> Void)) {
        addExternalLoginWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/User/ExternalLogin
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "href" : "href"
}}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<ExternalLoginResponse> 
     */
    open class func addExternalLoginWithRequestBuilder(model: ExternalLoginRequest? = nil) -> RequestBuilder<ExternalLoginResponse> {
        let path = "/api/User/ExternalLogin"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalLoginResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linkDevice(model: DeviceRequest? = nil, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        linkDeviceWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/User/Device
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "tokenType" : "deviceVerification",
  "token" : "token"
}}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func linkDeviceWithRequestBuilder(model: DeviceRequest? = nil) -> RequestBuilder<TokenResponse> {
        let path = "/api/User/Device"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func login(model: UserLoginRequest? = nil, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        loginWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/User/Login
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "tokenType" : "deviceVerification",
  "token" : "token"
}}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func loginWithRequestBuilder(model: UserLoginRequest? = nil) -> RequestBuilder<TokenResponse> {
        let path = "/api/User/Login"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profileInformation(completion: @escaping ((_ data: ProfileInformationResponse?,_ error: Error?) -> Void)) {
        profileInformationWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/User/ProfileInformation
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "externalLogins" : [ {
    "loginProvider" : "loginProvider",
    "providerKey" : "providerKey"
  }, {
    "loginProvider" : "loginProvider",
    "providerKey" : "providerKey"
  } ],
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "devices" : [ {
    "appVersion" : "appVersion",
    "lastLoginUtcDateTime" : "2000-01-23T04:56:07.000+00:00",
    "lastLoginIpAddress" : "lastLoginIpAddress",
    "deviceOs" : "deviceOs",
    "id" : "id",
    "deviceOsVersion" : "deviceOsVersion"
  }, {
    "appVersion" : "appVersion",
    "lastLoginUtcDateTime" : "2000-01-23T04:56:07.000+00:00",
    "lastLoginIpAddress" : "lastLoginIpAddress",
    "deviceOs" : "deviceOs",
    "id" : "id",
    "deviceOsVersion" : "deviceOsVersion"
  } ],
  "user" : {
    "phoneNumber" : "phoneNumber",
    "userId" : "userId",
    "email" : "email",
    "username" : "username"
  }
}}]

     - returns: RequestBuilder<ProfileInformationResponse> 
     */
    open class func profileInformationWithRequestBuilder() -> RequestBuilder<ProfileInformationResponse> {
        let path = "/api/User/ProfileInformation"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProfileInformationResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func register(model: UserRegisterRequest? = nil, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        registerWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/User/Register
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "tokenType" : "deviceVerification",
  "token" : "token"
}}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func registerWithRequestBuilder(model: UserRegisterRequest? = nil) -> RequestBuilder<TokenResponse> {
        let path = "/api/User/Register"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeDevice(model: RemoveDeviceRequest? = nil, completion: @escaping ((_ data: BaseResponse?,_ error: Error?) -> Void)) {
        removeDeviceWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - DELETE /api/User/RemoveDevice
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "apiError" : {
    "code" : "code",
    "message" : "message"
  }
}}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<BaseResponse> 
     */
    open class func removeDeviceWithRequestBuilder(model: RemoveDeviceRequest? = nil) -> RequestBuilder<BaseResponse> {
        let path = "/api/User/RemoveDevice"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BaseResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeExternalLogin(model: RemoveExternalLoginRequest? = nil, completion: @escaping ((_ data: BaseResponse?,_ error: Error?) -> Void)) {
        removeExternalLoginWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - DELETE /api/User/ExternalLogin
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "apiError" : {
    "code" : "code",
    "message" : "message"
  }
}}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<BaseResponse> 
     */
    open class func removeExternalLoginWithRequestBuilder(model: RemoveExternalLoginRequest? = nil) -> RequestBuilder<BaseResponse> {
        let path = "/api/User/ExternalLogin"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BaseResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendSms(model: SendSmsRequest? = nil, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        sendSmsWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/User/SendSmsCode
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "tokenType" : "deviceVerification",
  "token" : "token"
}}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func sendSmsWithRequestBuilder(model: SendSmsRequest? = nil) -> RequestBuilder<TokenResponse> {
        let path = "/api/User/SendSmsCode"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func verifySms(model: VerifySmsRequest? = nil, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        verifySmsWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/User/VerifySmsCode
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "tokenType" : "deviceVerification",
  "token" : "token"
}}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func verifySmsWithRequestBuilder(model: VerifySmsRequest? = nil) -> RequestBuilder<TokenResponse> {
        let path = "/api/User/VerifySmsCode"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
