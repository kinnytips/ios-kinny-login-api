//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accessToken(completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        accessTokenWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/User/AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "tokenType" : "deviceVerification",
  "token" : "token"
}}]

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func accessTokenWithRequestBuilder() -> RequestBuilder<TokenResponse> {
        let path = "/api/User/AccessToken"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func config(completion: @escaping ((_ data: ConfigResponse?,_ error: Error?) -> Void)) {
        configWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/User/Config
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "userId" : "userId",
  "linkedExternalLogins" : [ "linkedExternalLogins", "linkedExternalLogins" ]
}}]

     - returns: RequestBuilder<ConfigResponse> 
     */
    open class func configWithRequestBuilder() -> RequestBuilder<ConfigResponse> {
        let path = "/api/User/Config"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConfigResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linkDevice(model: DeviceRequest? = nil, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        linkDeviceWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/User/Device
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "tokenType" : "deviceVerification",
  "token" : "token"
}}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func linkDeviceWithRequestBuilder(model: DeviceRequest? = nil) -> RequestBuilder<TokenResponse> {
        let path = "/api/User/Device"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter provider: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linkLogin(provider: String, completion: @escaping ((_ data: LinkLoginResponse?,_ error: Error?) -> Void)) {
        linkLoginWithRequestBuilder(provider: provider).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/User/LinkLogin/{provider}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "href" : "href"
}}]
     
     - parameter provider: (path)  

     - returns: RequestBuilder<LinkLoginResponse> 
     */
    open class func linkLoginWithRequestBuilder(provider: String) -> RequestBuilder<LinkLoginResponse> {
        var path = "/api/User/LinkLogin/{provider}"
        let providerPreEscape = "\(provider)"
        let providerPostEscape = providerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provider}", with: providerPostEscape, options: .literal, range: nil)
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LinkLoginResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func login(model: UserLoginRequest? = nil, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        loginWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/User/Login
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "tokenType" : "deviceVerification",
  "token" : "token"
}}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func loginWithRequestBuilder(model: UserLoginRequest? = nil) -> RequestBuilder<TokenResponse> {
        let path = "/api/User/Login"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func register(model: UserRegisterRequest? = nil, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        registerWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/User/Register
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "tokenType" : "deviceVerification",
  "token" : "token"
}}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func registerWithRequestBuilder(model: UserRegisterRequest? = nil) -> RequestBuilder<TokenResponse> {
        let path = "/api/User/Register"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter phoneNumber: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendSms(phoneNumber: String, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        sendSmsWithRequestBuilder(phoneNumber: phoneNumber).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/User/SendSmsCode/{phoneNumber}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "tokenType" : "deviceVerification",
  "token" : "token"
}}]
     
     - parameter phoneNumber: (path)  

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func sendSmsWithRequestBuilder(phoneNumber: String) -> RequestBuilder<TokenResponse> {
        var path = "/api/User/SendSmsCode/{phoneNumber}"
        let phoneNumberPreEscape = "\(phoneNumber)"
        let phoneNumberPostEscape = phoneNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{phoneNumber}", with: phoneNumberPostEscape, options: .literal, range: nil)
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func verifySms(model: VerifyPhoneRequest? = nil, completion: @escaping ((_ data: TokenResponse?,_ error: Error?) -> Void)) {
        verifySmsWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/User/VerifySmsCode
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "expires" : "2000-01-23T04:56:07.000+00:00",
  "apiError" : {
    "code" : "code",
    "message" : "message"
  },
  "tokenType" : "deviceVerification",
  "token" : "token"
}}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<TokenResponse> 
     */
    open class func verifySmsWithRequestBuilder(model: VerifyPhoneRequest? = nil) -> RequestBuilder<TokenResponse> {
        let path = "/api/User/VerifySmsCode"
        let URLString = KinnyLoginApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TokenResponse>.Type = KinnyLoginApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
